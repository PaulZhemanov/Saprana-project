/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.49.1
  Forc version: 0.40.1
  Fuel-Core version: 0.19.1
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum ErrorInput { AddressAlreadyMint = 'AddressAlreadyMint', MintIsClosed = 'MintIsClosed', NotOwner = 'NotOwner', SorryButSoldOut = 'SorryButSoldOut' };
export enum ErrorOutput { AddressAlreadyMint = 'AddressAlreadyMint', MintIsClosed = 'MintIsClosed', NotOwner = 'NotOwner', SorryButSoldOut = 'SorryButSoldOut' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InputErrorInput { TokenAlreadyExists = 'TokenAlreadyExists', TokenDoesNotExist = 'TokenDoesNotExist' };
export enum InputErrorOutput { TokenAlreadyExists = 'TokenAlreadyExists', TokenDoesNotExist = 'TokenDoesNotExist' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type BuyTicketLogInput = { event: EventInput, timestamp: BigNumberish, buyer: IdentityInput, ticket_id: BigNumberish, ticket_number: BigNumberish };
export type BuyTicketLogOutput = { event: EventOutput, timestamp: BN, buyer: IdentityOutput, ticket_id: BN, ticket_number: BN };
export type ClaimLogInput = { event: EventInput, timestamp: BigNumberish, amount: BigNumberish };
export type ClaimLogOutput = { event: EventOutput, timestamp: BN, amount: BN };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type CreateEventLogInput = { event: EventInput, timestamp: BigNumberish, payment: BigNumberish };
export type CreateEventLogOutput = { event: EventOutput, timestamp: BN, payment: BN };
export type EventInput = { id: BigNumberish, owner: AddressInput, name: string, max_participantes: BigNumberish, deadline: BigNumberish, ticket_price: BigNumberish, tickets_sold: BigNumberish, balance: BigNumberish };
export type EventOutput = { id: BN, owner: AddressOutput, name: string, max_participantes: BN, deadline: BN, ticket_price: BN, tickets_sold: BN, balance: BN };
export type MintEventInput = { owner: IdentityInput, token_id: BigNumberish };
export type MintEventOutput = { owner: IdentityOutput, token_id: BN };

export type SapranaAbiConfigurables = {
  ADMIN: AddressInput;
  PROTOCOL_OWNER_FEE: BigNumberish;
};

interface SapranaAbiInterface extends Interface {
  functions: {
    buy_ticket: FunctionFragment;
    claim: FunctionFragment;
    create_event: FunctionFragment;
    get_event: FunctionFragment;
    verify: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'buy_ticket', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'claim', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'create_event', values: [string, BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_event', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'verify', values: [AddressInput, BigNumberish, BigNumberish]): Uint8Array;

  decodeFunctionData(functionFragment: 'buy_ticket', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'claim', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create_event', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_event', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'verify', data: BytesLike): DecodedValue;
}

export class SapranaAbi extends Contract {
  interface: SapranaAbiInterface;
  functions: {
    buy_ticket: InvokeFunction<[id: BigNumberish], BN>;
    claim: InvokeFunction<[id: BigNumberish], BN>;
    create_event: InvokeFunction<[name: string, max_participantes: BigNumberish, deadline: BigNumberish, ticket_price: BigNumberish], BN>;
    get_event: InvokeFunction<[id: BigNumberish], EventOutput>;
    verify: InvokeFunction<[ticket_owner: AddressInput, event_id: BigNumberish, token_id: BigNumberish], boolean>;
  };
}
