/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.49.1
  Forc version: 0.40.1
  Fuel-Core version: 0.19.1
*/

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { SapranaAbi, SapranaAbiInterface } from "../SapranaAbi";

const _abi = {
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum Error",
      "components": [
        {
          "name": "AddressAlreadyMint",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "MintIsClosed",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "NotOwner",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "SorryButSoldOut",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum Identity",
      "components": [
        {
          "name": "Address",
          "type": 7,
          "typeArguments": null
        },
        {
          "name": "ContractId",
          "type": 10,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum InputError",
      "components": [
        {
          "name": "TokenAlreadyExists",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "TokenDoesNotExist",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "str[50]",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "struct Address",
      "components": [
        {
          "name": "value",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "struct BuyTicketLog",
      "components": [
        {
          "name": "event",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "timestamp",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "buyer",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "ticket_id",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "ticket_number",
          "type": 14,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "struct ClaimLog",
      "components": [
        {
          "name": "event",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "timestamp",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "amount",
          "type": 14,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "struct ContractId",
      "components": [
        {
          "name": "value",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct CreateEventLog",
      "components": [
        {
          "name": "event",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "timestamp",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "payment",
          "type": 14,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct Event",
      "components": [
        {
          "name": "id",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "owner",
          "type": 7,
          "typeArguments": null
        },
        {
          "name": "name",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "max_participantes",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "ticket_price",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "tickets_sold",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "balance",
          "type": 14,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "struct MintEvent",
      "components": [
        {
          "name": "owner",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "token_id",
          "type": 14,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "id",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "buy_ticket",
      "output": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "id",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "claim",
      "output": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "max_participantes",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "ticket_price",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "create_event",
      "output": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "id",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "get_event",
      "output": {
        "name": "",
        "type": 12,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "ticket_owner",
          "type": 7,
          "typeArguments": null
        },
        {
          "name": "event_id",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "token_id",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "verify",
      "output": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": 0,
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": 1,
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": 2,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 3,
      "loggedType": {
        "name": "",
        "type": 13,
        "typeArguments": []
      }
    },
    {
      "logId": 4,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 5,
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": 6,
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": 7,
      "loggedType": {
        "name": "",
        "type": 9,
        "typeArguments": []
      }
    },
    {
      "logId": 8,
      "loggedType": {
        "name": "",
        "type": 11,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "ADMIN",
      "configurableType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      },
      "offset": 13960
    },
    {
      "name": "PROTOCOL_OWNER_FEE",
      "configurableType": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "offset": 13992
    }
  ]
}

export class SapranaAbi__factory {
  static readonly abi = _abi
  static createInterface(): SapranaAbiInterface {
    return new Interface(_abi) as unknown as SapranaAbiInterface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): SapranaAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as SapranaAbi
  }
}
